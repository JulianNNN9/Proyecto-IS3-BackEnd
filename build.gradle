plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.3'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'jacoco'
    id 'org.sonarqube' version '4.4.1.3373'
}

group = 'co.edu.uniquindio'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    implementation 'com.google.zxing:core:3.4.1'
    implementation 'com.google.zxing:javase:3.4.1'

    implementation 'org.simplejavamail:simple-java-mail:8.11.2'
    implementation 'org.simplejavamail:batch-module:8.10.1'

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    implementation 'org.springframework.boot:spring-boot-starter-websocket'

    implementation 'org.springframework.security:spring-security-crypto:6.3.3'
    implementation 'io.jsonwebtoken:jjwt-api:0.12.6'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.6'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.6'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.micrometer:micrometer-registry-prometheus'

}

jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
    }
    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, exclude: [
                            "co/edu/uniquindio/laos/dto/**",
                            "co/edu/uniquindio/laos/config/**",
                            "**/*Application.class"
                    ])
                })
        )
    }
}

sonarqube {
    properties {
        // Para SonarCloud
        property "sonar.projectKey", System.getenv('SONAR_PROJECT_KEY') ?: "juliannnn9_laos-backend"
        property "sonar.organization", System.getenv('SONAR_ORGANIZATION') ?: "juliannnn9"
        property "sonar.host.url", "https://sonarcloud.io"

        // Configuración común
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.coverage.jacoco.xmlReportPaths", "${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml"

        // Exclusiones (opcional)
        property "sonar.exclusions", "src/main/java/co/edu/uniquindio/laos/dto/**"
    }
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

tasks.named('sonarqube').configure {
    dependsOn test
}